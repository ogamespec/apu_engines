*= $049000

;---------------------------------------------------------------------------

;UPDATED BY Joel Yliluoma
;  AT http://bisqwit.iki.fi/jutut/megamansource/
;

;---------------------------------------------------------------------------

;The music player is located in bank 4.
;Bank 4 also contains the Elecman stage and game startup screen
;settings, and therefore this code begins from $9000, not $8000.
;

;
;
; This file can be assembled into IPS or O65
; using Nescom - http://bisqwit.iki.fi/source/nescom.html
; and then reinserted into the ROM with a tool of choice.
;
; Note: Mega Man 2 has almost the same code!
;

#define Var41 $41   ;If this address has low bit set, the engine pauses music (read only)

#define Priorities                   $E0
; $E0 = #ssssmmmm
; mmmm = Music priority (always #$F?...)
; ssss = sfx   priority

#define SFX_ChannelUsage             $E1
; $E1 = #????3210
; channels used for SFX
;

#define SongDataPointer              $E2 ; E2,E3

#define SuspendPlayback              $E4

#define ChannelsRemaining            $E5
#define PriorityTemp                 $E5 ;alias
#define TempVibratoPointer           $E5 ;alias; occupies E5,E6

#define RegisterOffsetUnknown        $E6 ; mirrors the purpose of $EB? I don't understand...

#define SpeedUpFactor                $E7 ; If 2, each note is played at half length!
#define FadingSpeed                  $E8 ; Set by Command $FD
#define VolumeFadeStrength           $E9 ; Controlled by FadingSpeed

#define SoundFrameCounter            $EA
#define CurrentChannelRegisterOffset $EB
#define CurChanDataPtr               $EC ; EC,ED   it's an index to AudioStatusBuffer
#define CurrentChannelNumber         $EE
#define UnknownEF                    $EF

#define SFX_Addr                     $F0 ; F0,F1
#define SFX_FrameWaitCount           $F2 ; Number of frames before next SFX tick
#define SFX_LoopCounter              $F3

; F4,F5 various temps

#define MUSCMD_SetSpeed              0
#define MUSCMD_SetVibratoCtrl        1 ;probably wrong
#define MUSCMD_SetDutyCycle          2
#define MUSCMD_SetVolumeAndEnv       3
#define MUSCMD_Loop                  4
#define MUSCMD_SetNoteBaseOffset     5
#define MUSCMD_PlayNoteExtraLength   6
#define MUSCMD_SetVolumeCurve        7
#define MUSCMD_SetVibratoIndex       8
#define MUSCMD_EndOfData             9
#define MUSCMD_SetNoteDelay          $20
#define MUSCMD_TripletSpeed          $30

#define SFXCMD_SetFrameWaitCount     0
#define SFXCMD_SetVibratoCtrl        1
#define SFXCMD_SetDutyCycle          2
#define SFXCMD_SetVolumeAndEnv       3
#define SFXCMD_Loop                  4
#define SFXCMD_SetVibratoBuffer      5
#define SFXCMD_EndOfData             6
#define SFXCMD_SetNotePeriod         $80
#define SFXCMD_Exec_80               $80

; Each channel data is 31 bytes ($1F)
#define CHNVAR_MusicDataAddr          $00 ; Pointer to the current executing position of the track
#define CHNVAR_NoteLengthWord         $02 ; This value is only read at 96DF
#define CHNVAR_TickSpeed              $04
#define CHNVAR_LoopCounter            $05
#define CHNVAR_VibratoDefs            $06 ;high 3 bits: delay in pitch? low 5 bits: vibrato depth
#define CHNVAR_NoteBaseOffset         $07 ;word
#define CHNVAR_VibratoCtrl            $09 ;probably wrong
#define CHNVAR_NotePeriodWord         $0A ;looks right
#define CHNVAR_DutyCycle              $0C ;high two bits=duty, low 6=volume and env
#define CHNVAR_VolumeCurveLength      $0D ;00..7F=ascending, 80..FF=descending
#define CHNVAR_VolumeCurvePosition    $0E
#define CHNVAR_VolumeCurveStrength    $0F ;high 4 bits used only
#define CHNVAR_VibratoCtrlSFX         $10 ;probably wrong
#define CHNVAR_NotePeriodWordSFX      $11 ;looks right
#define CHNVAR_DutyCycleSFX           $13
#define CHNVAR_VibratoBuffer          $14 ;14,15,16,17
#define CHNVAR_VibratoVar1            $18
#define CHNVAR_VibratoVar2            $19
#define CHNVAR_PeriodLo               $1A ; Added together with NotePeriodWord.Lo when written
#define CHNVAR_PeriodHi               $1B ; Added together with NotePeriodWord.Hi when written
#define CHNVAR_PeriodHiOld            $1C ; Cache of PeriodHi
#define CHNVAR_TremoloVar1            $1D
#define CHNVAR_TremoloVar2            $1E

#define AudioStatusBuffer             $0500 ;ends at $57C
#define AudioChannelStatusSize        31

#define VibratoBufferPointer          $57C ;pointer to the "fifth" channel data


; Vibrato bytes;
;   First byte seems to be the vibrato wavelength (aka. speed)
;   Second byte:
;     High nibble: Vibrato depth
;     Low nibble: Vibrato wavelength (again?)
;   Third byte:
;     Tremolo depth | $80
;   Fourth byte:
;     Tremolo speed? 0=disabled






SoundCodePlay ; at $9000
  jmp UpdateSound

SoundCodeInit ; at $9003
  cmp #$FC
  bne +
  jmp SoundCodeCommandFC
+
  cmp #$FD
  bne +
  jmp SoundCodeCommandFD
+
  cmp #$FE
  bne +

SoundCodeCommandFE ; at 9015
  lda #$01
  sta SuspendPlayback
  lda #$00
  sta CurChanDataPtr
  jmp ResetSoundSystem

+
  cmp #$ff
  bne +

SoundCodeCommandFF ; at 9024
  lda #$01
  sta SuspendPlayback
  lda #$00
  sta CurChanDataPtr
  jmp StopMusic

+

; address of sound => SongDataPointer
  asl
  tax
  lda MusicAndSfxTable,x
  sta SongDataPointer+0
  inx
  lda MusicAndSfxTable,x
  sta SongDataPointer+1

  ldy #$00
  lda (SongDataPointer),y
  tax
  and #$0f
  beq StartSFX

StartMusicTrack:
; If this music score has lower priority than the currently playing one,
; then just return...
  lda Priorities
  and #$0f
  sta PriorityTemp
  cpx PriorityTemp
  bcs +
  rts
+
; Set the priority to this new music
  stx PriorityTemp
  lda Priorities
  and #$F0
  ora PriorityTemp
  sta Priorities

; Suspend playback so the sound code won't interrupt us
  lda #$01
  sta SuspendPlayback

  lda #$00
  sta CurChanDataPtr

  lda #$00
  sta SpeedUpFactor
  sta FadingSpeed

  lda #$04    ; Number of channels to loop thru
  sta ChannelsRemaining

; SongDataPointer += 1
  lda #1

; Loop thru channels
--
  clc
  adc SongDataPointer+0
  sta SongDataPointer+0
  lda #0
  adc SongDataPointer+1
  sta SongDataPointer+1

  ldx CurChanDataPtr

; Copy channel's music data address to work RAM

  ldy #CHNVAR_MusicDataAddr
-
  lda (SongDataPointer),y
  sta AudioStatusBuffer,x
  inx
  iny
  cpy #$02
  bne -

; Clear rest of the channel's vars (02..0F). 10..1E is left intact.

  ldy #$0E
  lda #$00
-
  sta AudioStatusBuffer,x
  inx
  dey
  bne -

  lda SFX_ChannelUsage
  lsr
  bcs +
  jsr ClearSFXRAM
+
  jsr SFX_NextChannel
  dec ChannelsRemaining
  beq +
  lda #$02
  jmp --
+
  ldy #$02
  lda (SongDataPointer),y
  sta VibratoBufferPointer+0
  iny
  lda (SongDataPointer),y
  sta VibratoBufferPointer+1
  jsr SFX_FirstChannel

; Let music callback play again
  lda #$00
  sta SuspendPlayback
  rts


StartSFX: ; at 90BC
; If SFX priority has a lower priority then the current one, then exit
  lda Priorities
  and #$f0
  sta PriorityTemp
  cpx PriorityTemp
  bcs +
  rts
+
; Set the sfx priority to this new sfx
  stx PriorityTemp
  lda Priorities
  and #$0f
  ora PriorityTemp
  sta Priorities
; Suspend playback so the sound code won't interrupt us
  lda #$01
  sta SuspendPlayback
  lda #$00
  sta CurChanDataPtr
  ldx #$00
  lda #$02
  clc
  adc SongDataPointer+0
  sta SFX_Addr+0
  txa
  adc SongDataPointer+1
  sta SFX_Addr+1

  stx SFX_FrameWaitCount
  stx SFX_LoopCounter

; ChannelUsage
  ldy #$01
  lda (SongDataPointer),y
  and #$0f
  tax
  ora SFX_ChannelUsage
  pha
  stx SFX_ChannelUsage


; Loop thru all channels
  lda #$04
  sta ChannelsRemaining
  lda #$02
  sta RegisterOffsetUnknown
-
  pla

  lsr
  pha
  bcc +

; this SFX uses this channel so clear SFX RAM
  jsr ClearSFXRAM

  lda SFX_ChannelUsage
  lsr
  bcs +
  jsr UpdateChannelUsedBySFX
+ jsr SFX_NextChannel

  lda #$04
  clc
  adc RegisterOffsetUnknown
  sta RegisterOffsetUnknown

  dec ChannelsRemaining
  bne -

  jsr SFX_FirstChannel

  lda SFX_ChannelUsage
  sta UnknownEF
  pla


; Let music callback play again
  lda #$00
  sta SuspendPlayback
  rts

;
; Sound effect = #$FC
;
; Speed up the music
;
SoundCodeCommandFC ; at 912A
  iny
  sty SpeedUpFactor
  rts

;
; Sound effect = #$FD
;
; Fade in (negative number) or out (positive number)
;
SoundCodeCommandFD ; at 912E
  lda FadingSpeed
  bne +
  sty FadingSpeed
  lda #$01
  sta VolumeFadeStrength
  lda SoundFrameCounter                               ; $EA
  and #$01
  sta SoundFrameCounter                               ; $EA
+
  rts



ResetSoundSystem ; at 913F
; Set SFX priority to 0
  lda Priorities
  and #$0f
  sta Priorities

  lda #$04
  sta ChannelsRemaining
  lda #$02
  sta RegisterOffsetUnknown

-
  lda SFX_ChannelUsage
  lsr
  bcc +
  jsr ClearSFXRAM
  jsr UpdateChannelUsedBySFX
+
  jsr SFX_NextChannel
  lda #$04
  clc
  adc RegisterOffsetUnknown
  sta RegisterOffsetUnknown
  dec ChannelsRemaining
  bne -

  lda #$00
  sta SFX_ChannelUsage
  sta UnknownEF
  lda #$00
  sta SuspendPlayback
  rts



;Loads a SFX-related pointer(?)
UpdateChannelUsedBySFX ; at 9171
  lda CurChanDataPtr
  clc
  adc #CHNVAR_NotePeriodWord
  tax
  lda AudioStatusBuffer,x     ;If NotePeriodWord is nonzero?
  inx
  ora AudioStatusBuffer,x
  bne ReloadVibrato
  ldy ChannelsRemaining       ;NotePeriodWord was zero.
  ldx RegisterOffsetUnknown
  jsr MuteChannel
  ldx CurChanDataPtr
  lda AudioStatusBuffer+CHNVAR_MusicDataAddr,x     ;Reads MusicDataAddr
  inx
  ora AudioStatusBuffer+CHNVAR_MusicDataAddr,x
  bne ReloadVibrato
  rts


StopMusic ; at 9193
; Set music priority to 0
  lda Priorities
  and #$F0
  sta Priorities

  lda #$00
  sta SpeedUpFactor
  sta FadingSpeed

; Loop thru all channels
  lda #$04
  sta ChannelsRemaining
-
  lda #$00
  ldx CurChanDataPtr         ;Zeroes MusicDataAddr
  sta AudioStatusBuffer,x
  inx
  sta AudioStatusBuffer,x

  jsr NextChannelPtr
  dec ChannelsRemaining
  bne -

  lda #$00
  sta SuspendPlayback
  rts


ClearSFXRAM ;at 91BA ;Zeroes the region $10..$1E of the current channel.
  ldy #$0F
  lda #$10
  clc
  adc CurChanDataPtr
  tax
  lda #$00
-
  sta AudioStatusBuffer,x
  inx
  dey
  bne -
  rts


; This routine copies the data from the currently selected
; vibrato buffer of the music track into the 14..17 range
; in the channel.
;
; It is the same region as updated by SFXCMD_SetVibratoBuffer.
;
ReloadVibrato ; at 91CC
  lda TempVibratoPointer+0 ;save this var
  pha
  lda TempVibratoPointer+1 ;(used temporarily for other purpose)
  pha

  lda VibratoBufferPointer+0
  sta TempVibratoPointer+0
  lda VibratoBufferPointer+1
  sta TempVibratoPointer+1

  lda CurChanDataPtr
  clc
  adc #CHNVAR_VibratoDefs
  tax
  lda AudioStatusBuffer,x
  and #$1F
  beq +    ; No vibrato?

; Vibrato
  tay
  lda #$00
-
  clc
  adc #$04
  dey
  bne -
+
  tay
  txa
  clc
  adc #(CHNVAR_VibratoBuffer - CHNVAR_VibratoDefs)
  tax
  lda #$04
-
  pha
  lda (TempVibratoPointer),y
  sta AudioStatusBuffer,x
  iny
  inx
  pla
  sec
  sbc #$01
  bne -

  pla
  sta TempVibratoPointer+1
  pla
  sta TempVibratoPointer+0
  rts



; Rotate SFX_ChannelUsage right without involving carry
SFX_NextChannel ; at 920F
  lsr SFX_ChannelUsage
  bcc NextChannelPtr
  lda SFX_ChannelUsage
  ora #$80
  sta SFX_ChannelUsage
NextChannelPtr ; at 9219
  ; CurChanDataPtr += 31
  lda #AudioChannelStatusSize
  clc
  adc CurChanDataPtr
  sta CurChanDataPtr
  rts


SFX_FirstChannel ; at 9221
  lsr SFX_ChannelUsage
  lsr SFX_ChannelUsage
  lsr SFX_ChannelUsage
  lsr SFX_ChannelUsage
  rts


;
; Mutes channel Y by setting period to #0 (or disabling it if noise)
;
; X must be set to 4 * Y + 2
;

MuteChannel ;at 922A
  cpy #$01    ; if chn# = 1 then disable noise channel
  beq +
  lda #$00
  sta $4000,x
  inx
  sta $4000,x
  dex
  rts
+
  lda #$07    ; Disable noise channel
  sta $4015
  rts


UpdateSound ;at 923F
  inc SoundFrameCounter                               ; $EA
  lda SuspendPlayback
  beq +
  rts
+
; CurChanDataPtr = #$500
  ldx #<(AudioStatusBuffer)
  ldy #>(AudioStatusBuffer)
  stx CurChanDataPtr+0
  sty CurChanDataPtr+1
; Set sounds registers offset to 0
  lda #$00
  sta CurrentChannelRegisterOffset
; Loop thru all channels
  lda #$04
  sta CurrentChannelNumber
UpdateSound_ChannelLoop:
  lda #$01
  ldy #CHNVAR_VibratoVar1
  clc
  adc (CurChanDataPtr),y  ; adds 1 to VibratoVar1
  sta (CurChanDataPtr),y
  lda #$01
  ldy #CHNVAR_TremoloVar1
  clc
  adc (CurChanDataPtr),y  ; adds 1 to TremoloVar1
  sta (CurChanDataPtr),y
; Call SFX_TickChannel if bit set in UnknownEF for this channel...
  lda UnknownEF
  lsr
  bcc +
  jsr SFX_TickChannel
+
; Jump if bit set in Var41 for this channel...
  lda Var41
  lsr
  bcc +
  jmp ++
+
; Skip processing if music address = 0
  ldy #CHNVAR_MusicDataAddr+0
  lda (CurChanDataPtr),y
  iny
  ora (CurChanDataPtr),y
  beq ++
  lda #$01
  ldy #CHNVAR_VolumeCurvePosition
  clc
  adc (CurChanDataPtr),y ; adds 1 to CHNVAR_VolumeCurvePosition
  sta (CurChanDataPtr),y
  jsr MUS_TickChannel
  jmp +++
; Music data for this channel is missing, so mute it
++
  lda UnknownEF
  lsr
  bcs +++
  ldx CurrentChannelRegisterOffset
  inx
  inx
  ldy CurrentChannelNumber
  jsr MuteChannel
+++
; Rotate UnknownEF right without involving carry
  lsr UnknownEF
  bcc +
  lda UnknownEF
  ora #$80
  sta UnknownEF
+
  dec CurrentChannelNumber
  beq UpdateSound_AllChannelsDone
; CurrentChannelRegisterOffset += #4, CurChanDataPtr += #AudioChannelStatusSize
  lda #4
  clc
  adc CurrentChannelRegisterOffset
  sta CurrentChannelRegisterOffset
  lda #AudioChannelStatusSize
  clc
  adc CurChanDataPtr+0
  sta CurChanDataPtr+0
  lda #0
  adc CurChanDataPtr+1
  sta CurChanDataPtr+1
  jmp UpdateSound_ChannelLoop
UpdateSound_AllChannelsDone:
; Do something that semi-resets frame counter sometimes (not very often)
  lda FadingSpeed
  and #$7f
  beq ++
  cmp SoundFrameCounter                               ; $EA
  bne ++
  lda SoundFrameCounter                               ; $EA
  and #$01
  sta SoundFrameCounter                               ; $EA
  inc VolumeFadeStrength
  lda #$10
  cmp VolumeFadeStrength
  bne ++
  lda FadingSpeed
  bmi +
  lda #$00
  sta FadingSpeed
+
  lda #$0f
  sta VolumeFadeStrength
++
; This seems to be the length of an SFX or something of the like...
  lda SFX_FrameWaitCount
  beq +
  dec SFX_FrameWaitCount
+
  lsr UnknownEF
  lsr UnknownEF
  lsr UnknownEF
  lsr UnknownEF
  rts


IterateNote ;at 92F6
; This function is arrived when
; both NoteLength > 0 and NotePeriodWord > 0.
;
  ldy #CHNVAR_DutyCycle
  lda (CurChanDataPtr),y
  ldy #$02
  cpy CurrentChannelNumber
  beq +      ;Skip 'and #$0F' for triangle channel
  and #$0f
+
  sta $F4
  lda FadingSpeed
  and #$7F
  beq ++
  lda VolumeFadeStrength

  ldy #$02
  cpy CurrentChannelNumber ;triangle channel can't be faded
  bne +
  ldx #$0c
-
  clc
  adc VolumeFadeStrength
  dex
  bne -
+
  tay
  lda FadingSpeed
  bmi +
  ldx #$ff
-
  inx
  cpx $F4
  beq ++
  dey
  bne -
  stx $F4
  jmp ++
+ -
  dec $F4
  beq ++
  dey
  bne -
++
  lda #$02
  cmp CurrentChannelNumber
  beq DoneVolumeCurve
  ldy #CHNVAR_VolumeCurveLength
  lda (CurChanDataPtr),y
  tax
  and #$7f
  beq DoneVolumeCurve

; This part omitted if channel is triangle or VolumeCurveLength had no low 7 bits
  iny
  cmp (CurChanDataPtr),y    ;VolumeCurvePosition
  beq +
  iny
  lda (CurChanDataPtr),y    ;VolumeCurveStrength
  and #$0f
  jmp ++
+
  lda #$00
  sta (CurChanDataPtr),y    ;VolumeCurvePosition
  iny
  lda (CurChanDataPtr),y    ;VolumeCurveStrength
  lsr
  lsr
  lsr
  lsr
  sta $F5                   ; $F5 <- (VolumeCurveStrength >> 4)
  txa                       ; A = VolumeCurveLength
  bpl +
  lda #$00
  sec
  sbc $F5
  sta $F5                   ; $F5 = 0 - $F5
+
  lda (CurChanDataPtr),y    ; VolumeCurveStrength
  and #$0f                  ; low 4 bits thereof
  clc
  adc $F5
  bpl ++
  lda #$00
  jmp +++
++
  cmp $F4
  bcc +++
  lda $F4
+++
  sta $F4
  lda (CurChanDataPtr),y    ; VolumeCurveStrength
  and #$F0
  ora $F4
  sta (CurChanDataPtr),y    ; VolumeCurveStrength

; Arrived here if channel was triangle or VolumeCurveLength had no low 7 bits
DoneVolumeCurve
  lda UnknownEF
  lsr
  bcs +
  lda #CHNVAR_DutyCycle
  sta $F5
  jmp ProcessTremolo
+
  lda #CHNVAR_VibratoCtrl
  sta $F5
  jmp ProcessVibrato

ProcessTremolo ;volume vibrato
   ; $F5 points to DutyCycle or DutyCycleSFX|$80
  
  ldy #CHNVAR_VibratoBuffer+2
  lda (CurChanDataPtr),y
  and #$7f
  beq +++++
  ldy #CHNVAR_TremoloVar1
  cmp (CurChanDataPtr),y
  beq +
  jmp ++++
+
  lda #$00
  sta (CurChanDataPtr),y
  ldy #CHNVAR_VibratoBuffer+3
  lda (CurChanDataPtr),y
  ldy #CHNVAR_TremoloVar2
  clc
  adc (CurChanDataPtr),y
  beq +
  bpl ++
+
  lda #$01
  sta (CurChanDataPtr),y
  jmp +++
++
  sta (CurChanDataPtr),y
  cmp #$10
  bcc ++++
  lda #$0f
  sta (CurChanDataPtr),y
+++
  lda #$00
  ldy #CHNVAR_VibratoBuffer+3
  sec
  sbc (CurChanDataPtr),y
  sta (CurChanDataPtr),y
++++
  ldy #CHNVAR_TremoloVar2
  lda (CurChanDataPtr),y
  cmp $F4
  bcs +++++
  sta $F4
+++++
  ldy #$02
  cpy CurrentChannelNumber
  beq +
  lda $F5
  and #$7f
  tay
  lda (CurChanDataPtr),y
  and #$f0
  ora $F4
  sta $F4
+
  ldx CurrentChannelRegisterOffset
  lda $F4
  sta $4000,x ;Write duty,decaysettings,length_disable
  lda $F5
  bpl +
  lda #CHNVAR_VibratoCtrlSFX | $80
  sta $F5
  jmp ProcessVibrato
+
  lda #CHNVAR_VibratoCtrl
  sta $F5

ProcessVibrato
  ; $F5 points to VibratoCtrl or VibratoCtrlSFX|$80

  lda $F5
  and #$7f
  tay
  ldx #$00
  lda (CurChanDataPtr),y
; The value read comes usually from VibratoCtrl, but may come from VibratoCtrlSFX too
  beq ++
  bpl +
  dex
+
  iny ;Either NotePeriodWord or NotePeriodWordSFX
  clc
  adc (CurChanDataPtr),y
  sta (CurChanDataPtr),y
  txa
  iny
  adc (CurChanDataPtr),y
  sta (CurChanDataPtr),y
++
  lda $F5
  bmi +
  lda UnknownEF
  lsr
  bcc +
  rts
+
  ldy #CHNVAR_VibratoBuffer+0
  lda (CurChanDataPtr),y
  and #$7f
  bne +
  jmp +++
+
  ldy #CHNVAR_VibratoVar1
  cmp (CurChanDataPtr),y
  beq +
  jmp +++
+
  lda #$00                    ;If VibratoVar1 was 0
  sta (CurChanDataPtr),y
  tax
  ldy #CHNVAR_VibratoBuffer+1
  lda (CurChanDataPtr),y
  rol
  rol
  rol
  rol
  and #$07
  sta $F4

  ldy #CHNVAR_VibratoVar2
  lda (CurChanDataPtr),y
  asl
  bcc +
  lda #$00                    ;If VibratoVar2 had high bit set
  sec
  sbc $F4
  sta $F4
  dex
+
  lda $F4
  clc
  ldy #CHNVAR_PeriodLo
  adc (CurChanDataPtr),y
  sta (CurChanDataPtr),y
  iny
  txa
  adc (CurChanDataPtr),y
  sta (CurChanDataPtr),y
  ldy #CHNVAR_VibratoBuffer+1
  lda (CurChanDataPtr),y
  and #$1f
  sta $F4
  ldy #CHNVAR_VibratoVar2
  lda (CurChanDataPtr),y      ;Adds 1 to VibratoVar2
  clc
  adc #$01
  sta (CurChanDataPtr),y
  and #$7f
  cmp $F4
  bne +++
  lda (CurChanDataPtr),y
  and #$80
  sta (CurChanDataPtr),y
  ldy #CHNVAR_VibratoBuffer+0
  lda (CurChanDataPtr),y
  asl
  bcs ++
  lda (CurChanDataPtr),y
  ora #$80
  sta (CurChanDataPtr),y
  ldy #CHNVAR_VibratoVar2
  lda (CurChanDataPtr),y
  bpl +
  and #$7f
  sta (CurChanDataPtr),y
  jmp +++
+
  ora #$80
  sta (CurChanDataPtr),y
  jmp +++
++
  lda (CurChanDataPtr),y
  and #$7f
  sta (CurChanDataPtr),y

+++

  ; $F5 points to VibratoCtrl or VibratoCtrlSFX|$80
  
  lda $F5
  and #$7f
  sta $F5
  inc $F5         ; Now points to NotePeriodWord or NotePeriodWordSFX (no high bit)

  ldy #CHNVAR_PeriodLo
  lda (CurChanDataPtr),y
  ldy $F5
  clc
  adc (CurChanDataPtr),y
  tax

  ldy #CHNVAR_PeriodHi
  lda (CurChanDataPtr),y
  inc $F5                 ; NotePeriodWord(SFX).hi
  ldy $F5
  adc (CurChanDataPtr),y
  tay

; X,y now contains (NotePeriodWord + Period)

  lda #$01
  cmp CurrentChannelNumber
  bne +

; This part is ignored for noise channel
  lda #15 ;enable all channels
  sta $4015
  txa
  and #15
  tax
  inc $F5
  ldy $F5
  lda (CurChanDataPtr),y
  and #$80
  sta $F4
  txa
  ora $F4
  tax
  ldy #$00
+
; Period writing: X = Lo, Y = Hi (only written if changed)
  txa
  ldx CurrentChannelRegisterOffset
  inx
  inx
  sta $4000,x     ;write wavelength low byte
  tya
  ldy #CHNVAR_PeriodHiOld
  cmp (CurChanDataPtr),y
  bne +
  rts
+
  sta (CurChanDataPtr),y
  ora #$08
  inx
  sta $4000,x     ;write wavelength high byte
  rts


DisableChannel ;at 9508
  ldy #$01
  cpy CurrentChannelNumber
  bne +
  lda #$07    ; Disable noise channel
  sta $4015
  rts
+
; Write $0000 as the period value of the channel
  lda #$00
  ldx CurrentChannelRegisterOffset
  inx
  inx
  sta $4000,x
  inx
  sta $4000,x
  rts


ResetPitch ;at 9522
  ; Input: $F4 = index to DutyCycle or DutyCycleSFX
  ;
  ldy #CHNVAR_VibratoBuffer+0
  lda (CurChanDataPtr),y
  and #$7F
  sta (CurChanDataPtr),y
  ldy #CHNVAR_VibratoBuffer+2
  lda (CurChanDataPtr),y
  asl
  bcc ++
  ldy $F4
  lda (CurChanDataPtr),y

  ldx #$02
  cpx CurrentChannelNumber
  beq +
  and #$0f ;Ignored for triangle channel
+
  ldy #CHNVAR_TremoloVar2
  sta (CurChanDataPtr),y
++
  ldx #$06
  lda #$00
  ldy #CHNVAR_VibratoVar1  ; Will zero VibratoVar1..TremoloVar1
-
  sta (CurChanDataPtr),y
  iny
  dex
  bne -

; Set old period to dummy value to be sure it gets updated in the next frame
  lda #$ff
  ldy #CHNVAR_PeriodHiOld
  sta (CurChanDataPtr),y
  rts


; Does something for the channel without changing PeriodHiOld
ResetPitchButSavePitchHiOld ;at 9554
  ldy #CHNVAR_PeriodHiOld
  lda (CurChanDataPtr),y
  pha
   jsr ResetPitch
  pla
  ldy #CHNVAR_PeriodHiOld
  sta (CurChanDataPtr),y
  rts


DoCalculatedGoto ;at 9562
  txa
  asl
  tay
  iny
  pla
  sta $F4
  pla
  sta $F5
  lda ($F4),y
  tax
  iny
  lda ($F4),y
  sta $F5
  stx $F4
  jmp ($00F4)



SFX_TickChannel ;at 9579
  lda SFX_FrameWaitCount
  bne +
  jmp ReadDataSFX
+
  ldy #CHNVAR_NotePeriodWordSFX
  lda (CurChanDataPtr),y ;lo
  iny
  ora (CurChanDataPtr),y ;hi
  bne +
  rts
+
  iny
  lda (CurChanDataPtr),y ;DutyCycleSFX
  ldy #$02
  cpy CurrentChannelNumber
  beq +
  and #$0f
+
  sta $F4
  lda #CHNVAR_DutyCycleSFX | $80
  sta $F5
  jmp ProcessTremolo



ReadDataSFX ;at 959E
  jsr ReadByteSFX
  asl
  bcs +
  jmp CMDSFX_Select
+
  txa
  and #$0f
  cmp #$0f
  bne CMDSFX_SetNotePeriodSFX
CMDSFX_Exec_80
  jsr ReadByteSFX
  jmp ResetPitchButSavePitchHiOld

CMDSFX_SetNotePeriodSFX ;at 95B4; Byte was 8x
; The low 3 bits will be written to NotePeriodWordSFX+1
; And the following byte will be written to NotePeriodWordSFX+0

  and #$07
  sta $F4
  jsr ReadByteSFX

  ldy #CHNVAR_NotePeriodWordSFX
  sta (CurChanDataPtr),y
  iny
  lda $F4
  sta (CurChanDataPtr),y
  lda #CHNVAR_DutyCycleSFX
  sta $F4

  jsr ResetPitch
  jmp DisableChannel

CMDSFX_Select ;at 95CE
  jsr DoCalculatedGoto ;
.word CMDSFX_SetFrameWaitCount
.word CMDSFX_SetVibratoCtrl
.word CMDSFX_SetDutyCycle
.word CMDSFX_SetVolumeAndEnv
.word CMDSFX_Loop
.word CMDSFX_SetVibratoBuffer
.word CMDSFX_EndOfData

CMDSFX_SetFrameWaitCount ;at 95DF
  jsr ReadByteSFX
  sta SFX_FrameWaitCount
  jmp ReadDataSFX

CMDSFX_SetVibratoCtrl ;at 95E7
;Stores the param into VibratoCtrlSFX
  jsr ReadByteSFX
  ldy #CHNVAR_VibratoCtrlSFX
  sta (CurChanDataPtr),y
  jmp ReadDataSFX

CMDSFX_SetDutyCycle ;at 95F1
  jsr ReadByteSFX
  sta $F4
  ldy #CHNVAR_DutyCycleSFX
  lda (CurChanDataPtr),y
  and #$3f
  ora $F4
  jmp +

CMDSFX_SetVolumeAndEnv ;at 9601
  jsr ReadByteSFX
  ldy #$02
  cpy CurrentChannelNumber
  beq + ;omit for triangle channel
  sta $F4
  ldy #CHNVAR_DutyCycleSFX
  lda (CurChanDataPtr),y
  and #$C0
  ora $F4
+
  ldy #CHNVAR_DutyCycleSFX
  sta (CurChanDataPtr),y
  jmp ReadDataSFX

CMDSFX_Loop ;at 961B
  jsr ReadByteSFX
  txa
  beq +
  cpx SFX_LoopCounter
  beq ++
  inc SFX_LoopCounter
+ jsr ReadByteSFX
  sta $F4
  jsr ReadByteSFX
  sta SFX_Addr+1
  lda $F4
  sta SFX_Addr+0
  jmp ReadDataSFX
++
  lda #$00
  sta SFX_LoopCounter

  lda #$02
  clc
  adc SFX_Addr+0
  sta SFX_Addr+0
  lda #$00
  adc SFX_Addr+1
  sta SFX_Addr+1

  jmp ReadDataSFX

CMDSFX_SetVibratoBuffer ;at 964C
  lda #CHNVAR_VibratoBuffer
  sta $F4
-
  jsr ReadByteSFX
  ldy $F4
  sta (CurChanDataPtr),y
  inc $F4
  ldy $F4
  cpy #$18
  bne -

  jmp ReadDataSFX

CMDSFX_EndOfData ;at 9662
  lda SFX_Addr+0 ;decrease SFX_Addr by 1
  sec
  sbc #$01
  sta SFX_Addr+0
  lda SFX_Addr+1
  sbc #$00
  sta SFX_Addr+1

; Set priority to zero
  lda Priorities
  and #$0f
  sta Priorities

  lda #$00
  sta SFX_ChannelUsage

  lda UnknownEF
  and #$fe
  sta UnknownEF

  ldy #CHNVAR_NotePeriodWord
  lda (CurChanDataPtr),y           ;If NotePeriodWord is nonzero?
  iny
  ora (CurChanDataPtr),y
  bne +

  ldx CurrentChannelRegisterOffset ;NotePeriodWord was zero.
  inx
  inx
  ldy CurrentChannelNumber
  jsr MuteChannel

  ldy #CHNVAR_MusicDataAddr+0      ;Reads MusicDataAddr
  lda (CurChanDataPtr),y
  iny
  ora (CurChanDataPtr),y
  bne +
  rts
+
  ldy #CHNVAR_VibratoDefs          ;
  lda (CurChanDataPtr),y
  and #$1f
  tax
  jsr CopySelectedVibratoData


  lda #CHNVAR_DutyCycle
  sta $F4
  jmp ResetPitch


;
; Reads one SFX byte and increments SFX addr
;

ReadByteSFX ;at 96AC
  ldy #0
  lda (SFX_Addr),y
  tax
  lda #1
  clc
  adc SFX_Addr+0
  sta SFX_Addr+0
  lda #0
  adc SFX_Addr+1
  sta SFX_Addr+1
  txa
  rts



MUS_TickChannel ;at 96C0
  lda SpeedUpFactor
  beq +
; If SpeedUpFactor > 0, this function will be evaluated many times!
-
  pha
  jsr +
  pla
  sec
  sbc #$01
  bne -
  rts
+
  ldy #CHNVAR_LoopCounter  ; If the high bit of LoopCounter is set, the notes
  lda (CurChanDataPtr),y   ; will be played in 2/3 length. (Triplet speed)
  asl                    ; That is, delays are 2/3 of what they were.
  bcc +
  lda SoundFrameCounter                               ; $EA
  and #$01
  beq +
  jsr +
+
  ldy #CHNVAR_NoteLengthWord
  lda (CurChanDataPtr),y
  iny
  ora (CurChanDataPtr),y
  beq ++                 ;If current note length is 0000?

; Wasn't 0000
  ldx #$FF
  dey
  lda (CurChanDataPtr),y    ; NoteLengthWord.lo -= 4
  sec
  sbc #$04
  sta (CurChanDataPtr),y
  txa   ;A=$FF
  iny
  adc (CurChanDataPtr),y    ; NoteLengthWord.hi += $FF+carry
  sta (CurChanDataPtr),y
  dey
  ora (CurChanDataPtr),y    ; Is the note length now 0000?
  beq ++
  ldy #CHNVAR_NotePeriodWord ; Nope, it's not 0000
  lda (CurChanDataPtr),y
  iny
  ora (CurChanDataPtr),y    ; Check if NotePeriodWord == 0000
  bne +
  rts
+
  jmp IterateNote           ; No, NotePeriodWord is not 0000.

++
  ldy #CHNVAR_LoopCounter   ; Note length was 0.
  lda (CurChanDataPtr),y    ; Remove the high bit of LoopCounter
  and #$7F
  sta (CurChanDataPtr),y    ; And read more instructions

ReadDataMUS ;at 9712
  jsr ReadByteMUS

  and #$f0
  bne +
  jmp CMDMUS_Select
+
  cmp #$20
  bne +

CMDMUS_20 ;at 9720
  txa
  and #$07    ; These go to high 3 bits of VibratoDefs
  pha
  jsr ReadDataMUS
  pla
  jmp CMDMUS_20_End
+
  cmp #$30
  bne +
  jmp CMDMUS_TripletSpeed
+

; It's a note command(?)...
;
; X = the note. It is either in range 10..1F or 40..FF.

; Handles MUS notes
; Get the note length
  txa
  rol ;rol is like asl, but instead of 0 it feeds from Carry-flag.
  rol
  rol
  rol
  and #$07 ; .1..4567.. (huh?)
  tay
  lda NoteLengths_1,y  ; One of: 0,8,16,32,64

; NoteLength <- A * TickSpeed
  jsr SetNoteLengthWithTickSpeed

/*

If (VibratoDefs & 0xE0)
{
   VibratoDefs -= 0xE0;
   if(UnknownEF & 1) goto ResetPitchButSavePitchHiOld;
   return;
}
else
{
  Value = Parameter & 0x1F;
  if(Value == 0 or CurrentChannel == 1)
  {
    A,x = value,0
  }
  else
  {
    A,x = word ptr [NoteBaseOffset + Value*2]
  }
  NotePeriodWord = A,x
  ....
}


 */

SetupTone ;at 9740
  ldy #CHNVAR_VibratoDefs
  lda (CurChanDataPtr),y
  and #$E0   ; Check 7 high bits of CHNVAR_VibratoDefs
  beq ++
  sec
  sbc #$20   ; Decrease the 7-bit value by one
  sta $F4
  lda (CurChanDataPtr),y
  and #$1f
  ora $F4
  sta (CurChanDataPtr),y ; Decrease the counter (CHNVAR_VibratoDefs)
  lda UnknownEF
  lsr
  bcc +
  rts
+
  jmp ResetPitchButSavePitchHiOld
++
  txa
  and #$1f
  bne +
  tax
  jmp ++
+
  ldy #$01
  cpy CurrentChannelNumber
  bne +
; We're processing channel#1 (noise?)
  ldx #$00
  jmp ++
+
  asl
  ldy #CHNVAR_NoteBaseOffset
  clc
  adc (CurChanDataPtr),y
  sta $F4
  lda #$00
  iny
  adc (CurChanDataPtr),y
  sta $F5
  ldy #$01     ;Loads the period from table
  lda ($F4),y  ;Hi
  tax
  dey
  lda ($F4),y  ;Lo
++
  ldy #CHNVAR_NotePeriodWord ;Stores into NotePeriodWord
  sta (CurChanDataPtr),y
  iny
  txa
  sta (CurChanDataPtr),y
  ldy #CHNVAR_VolumeCurveLength
  lda (CurChanDataPtr),y    ; $F4 <- VolumeCurveLength
  sta $F4
  and #$7f
  beq +
  jsr ResetVolumeCurvePosition          ; Called if VolumeCurveLength had 7 low bits
+
  lda UnknownEF
  lsr
  bcc +
  rts
+
  lda #$0C
  sta $F4
  jsr ResetPitch
  jmp DisableChannel

CMDMUS_20_End ;at 97AE
  ror
  ror
  ror
  ror
  and #$E0        ; Set high 3 bits from param
  sta $F4
  ldy #CHNVAR_VibratoDefs
  lda (CurChanDataPtr),y
  and #$1f
  ora $F4
  sta (CurChanDataPtr),y
  rts


CMDMUS_TripletSpeed ;at 97C1
  lda #$80
  ldy #CHNVAR_LoopCounter ; Set the high bit of LoopCounter
  ora (CurChanDataPtr),y  ; It will be handled at 96CF
  sta (CurChanDataPtr),y
  jmp ReadDataMUS

CMDMUS_Select ;at 97CC
  jsr DoCalculatedGoto
.word CMDMUS_SetSpeed
.word CMDMUS_SetVibratoCtrl
.word CMDMUS_SetDutyCycle
.word CMDMUS_SetVolumeAndEnv
.word CMDMUS_Loop
.word CMDMUS_SetNoteBaseOffset
.word CMDMUS_PlayNoteExtraLength
.word CMDMUS_SetVolumeCurve
.word CMDMUS_SetVibratoIndex
.word CMDMUS_EndOfData

; Set tickspeed for this channel
CMDMUS_SetSpeed ;at 97E3
  jsr ReadByteMUS
  ldy #CHNVAR_TickSpeed
  sta (CurChanDataPtr),y
  jmp ReadDataMUS

CMDMUS_SetVibratoCtrl ;at 97ED
; Possibly parameters include: $00, $0F, $04, $2F
  jsr ReadByteMUS
  ldy #CHNVAR_VibratoCtrl
  sta (CurChanDataPtr),y
  jmp ReadDataMUS


; Set duty cycle for this channel
CMDMUS_SetDutyCycle ;at 97F7
  jsr ReadByteMUS
  sta $F4
  ldy #CHNVAR_DutyCycle
  lda (CurChanDataPtr),y
  and #$3f
  ora $F4
  jmp +
; Set volume and envelope/looping bits
CMDMUS_SetVolumeAndEnv ;at 9807
  jsr ReadByteMUS
  ldy #$02 ;just use the value as-is for triangle
  cpy CurrentChannelNumber
  beq +
  sta $F4
  ldy #CHNVAR_DutyCycle
  lda (CurChanDataPtr),y
  and #$C0
  ora $F4
+
  ldy #CHNVAR_DutyCycle
  sta (CurChanDataPtr),y
  jmp ReadDataMUS


CMDMUS_Loop ;at 9821
  jsr ReadByteMUS
  txa
  beq +
; Loop for a specified number of times...
  ldy #CHNVAR_LoopCounter
  lda (CurChanDataPtr),y
  and #$7F ; Remove the high bit, because it's used for something else
  sta $F4

  cpx $F4
  beq ++
  inc $F4
  lda (CurChanDataPtr),y
  and #$80
  ora $F4
  sta (CurChanDataPtr),y
+
; Load restart point
  jsr ReadByteMUS
  pha
  jsr ReadByteMUS
  pla
  ldy #CHNVAR_MusicDataAddr+0
  sta (CurChanDataPtr),y
  iny
  txa
  sta (CurChanDataPtr),y
  jmp ReadDataMUS

; Looped enough times(?)
++

; Skip addresses
  lda (CurChanDataPtr),y
  and #$80
  sta (CurChanDataPtr),y

  ldy #CHNVAR_MusicDataAddr+0
  lda #$02
  clc
  adc (CurChanDataPtr),y
  sta (CurChanDataPtr),y
  iny
  lda #$00
  adc (CurChanDataPtr),y
  sta (CurChanDataPtr),y
  jmp ReadDataMUS

CMDMUS_SetNoteBaseOffset ;at 9869
/*
  NoteBaseOffset = CMDMUS_SetNoteBaseOffsettable + (parameter*2)
 */
  jsr ReadByteMUS
  ldx #<(CMDMUS_SetNoteBaseOffsettable)
  ldy #>(CMDMUS_SetNoteBaseOffsettable)
  stx $F4
  sty $F5
  asl
  ldy #CHNVAR_NoteBaseOffset
  clc
  adc $F4
  sta (CurChanDataPtr),y
  lda #$00
  adc $F5
  iny
  sta (CurChanDataPtr),y
  jmp ReadDataMUS

CMDMUS_PlayNoteExtraLength ;at 9886
  jsr ReadByteMUS

; Y = upper 3 bits of music data byte in lower 3 bits
  rol
  rol
  rol
  rol
  and #$07
  tay

  lda NoteLengths_1half,y
  jsr SetNoteLengthWithTickSpeed
  jmp SetupTone


CMDMUS_SetVolumeCurve ;at 9899
; First byte goes into VolumeCurveLength
; Second byte goes into VolumeCurveStrength
  jsr ReadByteMUS
  ldy #CHNVAR_VolumeCurveLength
  sta (CurChanDataPtr),y
  pha
  jsr ReadByteMUS
  ldy #CHNVAR_VolumeCurveStrength
  sta (CurChanDataPtr),y
  pla
  sta $F4

  and #$7f
  beq +
  jsr ResetVolumeCurvePosition
+
  jmp ReadDataMUS

ResetVolumeCurvePosition ;at 98B5
  lda #$00
  ldy #CHNVAR_VolumeCurvePosition
  sta (CurChanDataPtr),y     ; VolumeCurvePosition <- $00
  lda $F4
  bpl +
  lda #$0f
  jmp ++
+
  lda #$00
++
  sta $F4
  ldy #CHNVAR_VolumeCurveStrength    ; VolumeCurvePosition <- (high bits) | $00  \_ either one
  lda (CurChanDataPtr),y             ; VolumeCurvePosition <- (high bits) | $0F  /  of these.
  and #$f0
  ora $F4
  sta (CurChanDataPtr),y
  rts


CMDMUS_SetVibratoIndex ;at 98D3 Sets low 5 bits of VibratoDefs
  jsr ReadByteMUS
  sta $F4
  ldy #CHNVAR_VibratoDefs
  lda (CurChanDataPtr),y
  and #$E0
  ora $F4
  sta (CurChanDataPtr),y
  lda UnknownEF
  lsr
  bcs +
  jsr CopySelectedVibratoData
+
  jmp ReadDataMUS

; A and X = note(?)

CopySelectedVibratoData ;at 98ED
  txa
  beq +
  lda #$00
-
  clc
  adc #$04
  dex
  bne -
+
  clc
  adc VibratoBufferPointer+0
  sta $F4
  lda #$00
  adc VibratoBufferPointer+1
  sta $F5

  ldx #$00
  ldy #CHNVAR_VibratoBuffer+0
-
  lda ($F4,x)
  sta (CurChanDataPtr),y
  iny
  cpy #CHNVAR_VibratoBuffer+4
  bne +
  rts
+
  lda #$01
  clc
  adc $F4
  sta $F4
  lda #$00
  adc $F5
  sta $F5
  jmp -


CMDMUS_EndOfData ;at 9923
  ldy #CHNVAR_MusicDataAddr+0    ; Set address to zero
  lda #$00
  sta (CurChanDataPtr),y
  iny
  sta (CurChanDataPtr),y

  lda Priorities
  and #$F0         ; keep sfx only
  sta Priorities
  lda UnknownEF
  lsr
  bcc +
  rts
+
  ldx CurrentChannelRegisterOffset
  inx
  inx
  ldy CurrentChannelNumber
  jmp MuteChannel

; Read music data?...

ReadByteMUS ;at 9941
  ldy #CHNVAR_MusicDataAddr+0
  lda (CurChanDataPtr),y
  sta $F4
  iny
  lda (CurChanDataPtr),y
  sta $F5
  dey

  lda ($F4),y
  tax
  lda #$01
  clc
  adc $F4
  sta (CurChanDataPtr),y
  lda #$00
  adc $F5
  iny
  sta (CurChanDataPtr),y
  txa
  rts


; Sets CHNVAR_NoteLengthWord as param * CHNVAR_TickSpeed
; Uses $F4..$F5 as temps

SetNoteLengthWithTickSpeed ;at 9960
  sta $F4
  lda #$00
  sta $F5

  ldy #CHNVAR_TickSpeed
  lda (CurChanDataPtr),y
  tay

  lda #$00
-
  clc
  adc $F4
  bcc +
  inc $F5
+
  dey
  bne -

  ldy #CHNVAR_NoteLengthWord
  sta (CurChanDataPtr),y
  iny
  lda $F5
  sta (CurChanDataPtr),y
  rts

; Tabs..
